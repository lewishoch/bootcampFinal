<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
        
        
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <context:component-scan base-package="service,dao,producer"></context:component-scan>
	
	<context:component-scan base-package="service"></context:component-scan>
	<context:component-scan base-package="dao"></context:component-scan>
	<context:component-scan base-package="aspect"></context:component-scan>
	
	
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@ITA-031-W7.corp.oocl.com:1521:xe"></property>
		<property name="password" value="123"></property>
		<property name="username" value="houdr"></property>
	</bean>

		<!--
		指定实现JPA的适配器，主要作用如下：
		1、取代persistence.xml中的<provider>
		2、指定方言
		3、通知“entityManagerFactory”产生什么样的entityManager
		4、还可以使用EclipseLinkJpaVendorAdapter(Toplink)，openJpaVendorAdapter
	 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="org.hibernate.dialect.OracleDialect" />
	</bean>
	
	
	<!-- JPA实体管理工厂的配置 使用@PersistenceContext会自动注入EntityManager,可以使用 @PersistenceUnit注入entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="persistenceUnitName" value="em"></property>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="po" /><!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>


	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- Spring Data Jpa配置 -->
	<!-- <jpa:repositories base-package="dao.impl" transaction-manager-ref="transactionManager" 
		entity-manager-factory-ref="entityManagerFactory"/> -->
	
	<!-- 
		对使用@Transactional的方法启用AOP
		proxy-target-class:表示是否对“目标类”启用代理。true:表示使用cglib方式(类)，false:表示使用Proxy方式（接口）
	
	-->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	
	<!-- JMS配置 -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="failover://tcp://10.222.57.12:61616" />
	</bean>

	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="10" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<!--这个是队列目的地，点对点的 -->
	<bean id="merchentQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>Merchant_Q001</value>
		</constructor-arg>
	</bean>
	
	<bean id="customerQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>Customer_Q001</value>
		</constructor-arg>
	</bean>
	 
	<bean id="merchantQueueListener" class="listener.MerchantQueueListener" />
	<bean id="jmsContainerNM"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="merchentQueue" />
		<property name="messageListener" ref="merchantQueueListener" />
	</bean>
	
	<bean id="customerQueueListener" class="listener.CustomerQueueListener" />
	<bean id="jmsContainerNC"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="customerQueue" />
		<property name="messageListener" ref="customerQueueListener" />
	</bean>

</beans>